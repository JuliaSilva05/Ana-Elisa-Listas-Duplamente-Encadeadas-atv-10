#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct node {
  struct node *ant;
  int info;
  struct node *prox;
} Node;

typedef struct lde {
  Node *inicio;
  Node *fim;
  int qtd;
} LDE;

void inicializar(LDE *lista) {
  lista->inicio = NULL;
  lista->qtd = 0;
  lista->fim = NULL;
}

int isEmpty(LDE lista) {
  if ((lista.inicio == NULL) && (lista.fim == NULL) && (lista.qtd == 0)) {
    return 1;
  } else {
    return 0;
  }
}

void exibir(LDE lista) {
  Node *aux = lista.inicio;
  while (aux != NULL) {
    printf("%d, ", aux->info);
    aux = aux->prox;
  }
  printf("\n%d\n", lista.qtd);
  free(aux);
}

Node *criarNo(int num) {
  Node *aux;
  aux = (Node *)malloc(sizeof(Node));
  aux->info = num;
  aux->ant = NULL;
  aux->prox = NULL;
  return aux;
}

void inserirOrdenado(LDE *lista, int num) {
  Node *novo, *aux, *anterior;
  if (isEmpty(*lista) == 1) {
    novo = criarNo(num);
    lista->inicio = novo;
    lista->fim = novo;
    lista->qtd = 1;
  } else if (num == lista->inicio->info || num == lista->fim->info) {
    printf("Valor repetido!\n");
    
  } else if (num < lista->inicio->info) {
    novo = criarNo(num);
    novo->prox = lista->inicio;
    lista->inicio->ant = novo;
    lista->inicio = novo;
    lista->qtd++;
  } else if (num > lista->fim->info) {
    novo = criarNo(num);
    novo->ant = lista->fim;
    lista->fim->prox = novo;
    lista->fim = novo;
    lista->qtd++;
  } else {
    aux = lista->inicio;
    while (aux != NULL) {
      if (aux->info == num) {
        printf("Valor repetido!\n");
        return;
      } else if (aux->info > num) {
        novo = criarNo(num);
        anterior = aux->ant;
        anterior->prox = novo;
        novo->ant = anterior;
        novo->prox = aux;
        aux->ant = novo;
        lista->qtd++;
        return;
      } else {
        aux = aux->prox;
      }
    }
  }
}

Node *buscar(LDE lista, int valor) {
  Node *aux;
  aux = lista.inicio;
  if (lista.inicio->info == valor) {
    return lista.inicio;
  }
  else if (lista.fim->info == valor){
    return lista.fim;
  }
  else{
    while (aux != NULL){
      if (aux->info == valor){
        return aux;
      }
      else{
        aux = aux->prox;
      }
    }
  }
  return NULL;
}

void inserirFinal(LDE *lista, int num) {
  Node *novo;
  novo = criarNo(num);
  novo->ant = lista->fim;
  lista->fim->prox = novo;
  lista->fim = novo;
  lista->qtd++;
}

void geraIntersecao(LDE l1, LDE l2, LDE *l3) {
  
  Node *aux, *retorno;
  aux = l1.inicio;
  while(aux != NULL){
    retorno = buscar(l2, aux->info);
    if (retorno != NULL){
      inserirOrdenado(l3, aux->info);
    }
    aux = aux->prox;
  }

  free(aux);
}

void geraUniao(LDE A, LDE B, LDE *uniao) {
  Node *aux, *retorno;
  aux = A.inicio;
  while (aux != NULL){
    inserirOrdenado(uniao, aux->info);
    aux = aux->prox;
  }
  aux = B.inicio;
  while (aux != NULL){
    if (buscar(A,aux->info) == NULL){
      inserirOrdenado(uniao, aux->info);
    }
    aux = aux->prox;
  }
  free(aux);
}

void geraDiferenca(LDE A, LDE B, LDE *diferenca) {
  Node *aux, *retorno;
  aux = A.inicio;
  while(aux != NULL){
    retorno = buscar(B, aux->info);
    if (retorno == NULL){
      inserirOrdenado(diferenca, aux->info);
    }
    aux = aux->prox;
  }

  free(aux);
}

int main(void) {
  LDE A, B, intersecao, uniao, diferenca;
  int i, num;
  inicializar(&A);
  inicializar(&B);
  inicializar(&intersecao);
  inicializar(&uniao);
  inicializar(&diferenca);
  

  printf("Preenchimento da lista A: \n");
  for (i = 1; i <= 3; i++) {
    printf("%d - Informe um número inteiro: ", i);
    scanf("%d", &num);
    inserirOrdenado(&A, num);
  }
  printf("\nPreenchimento da lista B: \n");
  for (i = 1; i <= 6; i++) {
    printf("%d - Informe um número inteiro: ", i);
    scanf("%d", &num);
    inserirOrdenado(&B, num);
  }

  printf("\nA: \n");
  exibir(A);
  printf("\nB: \n");
  exibir(B);

  geraIntersecao(A, B, &intersecao);
  geraUniao(A, B, &uniao);
  geraDiferenca(A, B, &diferenca);

  printf("\nInterseção: \n");
  exibir(intersecao);
  printf("\nUnião: \n");
  exibir(uniao);
  printf("\nDiferença: \n");
  exibir(diferenca);


  return 0;
}
